{"mappings":"AAAA,0DAA0D;AACzD,CAAA;IACC,sBAAsB;IACtB,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,MAAM,QAAQ,SAAS,cAAc,CAAC;IACtC,MAAM,QAAQ,SAAS,cAAc,CAAC;IACtC,MAAM,QAAQ,SAAS,cAAc,CAAC;IACtC,MAAM,SAAS,SAAS,cAAc,CAAC;IACvC,MAAM,OAAO,SAAS,cAAc,CAAC;IAErC,sDAAsD;IACtD,MAAM,sBAAsB;IAE5B,QAAQ,GAAG,CAAC;IAEZ,0BAA0B;IAC1B,KAAK,gBAAgB,CAAC,UAAU,OAAO;QACrC,MAAM,cAAc;QAEpB,kBAAkB;QAClB,IAAI,CAAC,sBAAsB;QAE3B,+BAA+B;QAC/B,IAAI,CAAC,eAAe,WAAW,CAAC,iBAAiB,QAAQ;QAEzD,oBAAoB;QACpB,MAAM,WAAW;YACf,UAAU,SAAS,KAAK,CAAC,IAAI;YAC7B,OAAO,MAAM,KAAK,CAAC,IAAI;YACvB,OAAO,MAAM,KAAK,CAAC,IAAI;YACvB,OAAO,OAAO,KAAK;QACrB;IAEA,4BAA4B;IAC5B,QAAQ;IACR,8DAA8D;IAC9D,sBAAsB;IACtB,uDAAuD;IACvD,sCAAsC;IACtC,QAAQ;IAER,wBAAwB;IACxB,wDAAwD;IACxD,MAAM;IAEN,0CAA0C;IAC1C,qCAAqC;IAErC,0EAA0E;IAC1E,kBAAkB;IAClB,oBAAoB;IACpB,oDAAoD;IACpD,uEAAuE;IACvE,IAAI;IACN;IAEA,sBAAsB;IACtB,MAAM,qBAAqB;QACzB,MAAM,kBAAkB,cACtB,UACA,aACA;QAEF,MAAM,eAAe,cAAc,OAAO;QAC1C,MAAM,eAAe,cAAc,OAAO;QAE1C,OAAO,mBAAmB,gBAAgB;IAC5C;IAEA,kBAAkB;IAClB,MAAM,iBAAiB,CAAC;QACtB,IAAI,OAAO,KAAK,KAAK,OAAO,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE;YAC5C,SAAS;YACT,OAAO;QACT;QACA,WAAW;QACX,OAAO;IACT;IAEA,oBAAoB;IACpB,MAAM,mBAAmB,CAAC;QACxB,IAAI,CAAC,SAAS,aAAa,IAAI;YAC7B,SAAS,cAAc;YACvB,OAAO;QACT;QACA,OAAO;IACT;IAEA,sBAAsB;IACtB,MAAM,gBAAgB,CAAC,OAAO,cAAc,YAAY,CAAC;QACvD,MAAM,QAAQ,MAAM,KAAK,CAAC,IAAI;QAE9B,IAAI,UAAU,MAAM,MAAM,MAAM,GAAG,WAAW;YAC5C,SAAS;YACT,OAAO;QACT;QAEA,IAAI,CAAC,aAAa,QAAQ;YACxB,SAAS;YACT,OAAO;QACT;QAEA,WAAW;QACX,OAAO;IACT;IAEA,MAAM,eAAe,CAAC,QACpB,mDAAmD,IAAI,CAAC,MAAM,IAAI;IAEpE,MAAM,eAAe,CAAC,QACpB,sEAAsE,IAAI,CACxE,MAAM,IAAI;IAGd,MAAM,cAAc,CAAC,OAAS,6BAA6B,IAAI,CAAC,KAAK,IAAI;IAEzE,sBAAsB;IACtB,MAAM,WAAW,CAAC,UAChB,QAAQ,aAAa,EAAE,UAAU,IAAI;IACvC,MAAM,aAAa,CAAC,UAClB,QAAQ,aAAa,EAAE,UAAU,OAAO;IAE1C,yEAAyE;IACzE,SACG,gBAAgB,CAAC,qCACjB,OAAO,CAAC,CAAC;QACR,QAAQ,GAAG,CAAC,MAAM,IAAI;QACtB,MAAM,QAAQ,SAAS,aAAa,CAAC,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;QAC/D,IAAI,OAAO,MAAM,SAAS,IAAI;IAChC;AACJ,CAAA","sources":["src/js/main.js"],"sourcesContent":["//  ========== Inputs data validation and sending ========\n(() => {\n  // Find inputs in form\n  const username = document.getElementById(\"name\");\n  const email = document.getElementById(\"email\");\n  const phone = document.getElementById(\"phone\");\n  const agree = document.getElementById(\"agree\");\n  const select = document.getElementById(\"select\");\n  const form = document.getElementById(\"form\");\n\n  // Adjust minimal length for name validation if needed\n  const MINIMAL_NAME_LENGTH = 3;\n\n  console.log(\"test\");\n\n  // Form Submission Handler\n  form.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    // Validate inputs\n    if (!validateTextInputs()) return;\n\n    // Validate Select and Checkbox\n    if (!validateSelect(select) || !validateCheckbox(agree)) return;\n\n    // Prepare form data\n    const formData = {\n      username: username.value.trim(),\n      phone: phone.value.trim(),\n      email: email.value.trim(),\n      title: select.value,\n    };\n\n    // Submit form data via AJAX\n    // try {\n    //   const response = await fetch(\"https://api-endpoint...\", {\n    //     method: \"POST\",\n    //     headers: { \"Content-Type\": \"application/json\" },\n    //     body: JSON.stringify(formData),\n    //   });\n\n    //   if (!response.ok) {\n    //     throw new Error(`Error: ${response.statusText}`);\n    //   }\n\n    //   const result = await response.json();\n    //   console.log(\"Success:\", result);\n\n    //   alert(\"Дякуємо за звернення, ми вас сповістимо на вказаний e-mail!\");\n    //   form.reset();\n    // } catch (error) {\n    //   console.error(\"Error submitting form:\", error);\n    //   alert(\"Сталась помилка при відправленні форми. Спробуйте ще раз\");\n    // }\n  });\n\n  // Validate All Inputs\n  const validateTextInputs = () => {\n    const isUsernameValid = validateField(\n      username,\n      isValidName,\n      MINIMAL_NAME_LENGTH\n    );\n    const isEmailValid = validateField(email, isValidEmail);\n    const isPhoneValid = validateField(phone, isValidPhone);\n\n    return isUsernameValid && isEmailValid && isPhoneValid;\n  };\n\n  // Validate Select\n  const validateSelect = (select) => {\n    if (select.value === select.options[0].value) {\n      setError(select);\n      return false;\n    }\n    setSuccess(select);\n    return true;\n  };\n\n  // Validate Checkbox\n  const validateCheckbox = (checkbox) => {\n    if (!checkbox.checkValidity()) {\n      checkbox.reportValidity();\n      return false;\n    }\n    return true;\n  };\n\n  // Validate Each Field\n  const validateField = (input, validationFn, minLength = 0) => {\n    const value = input.value.trim();\n\n    if (value === \"\" || value.length < minLength) {\n      setError(input);\n      return false;\n    }\n\n    if (!validationFn(value)) {\n      setError(input);\n      return false;\n    }\n\n    setSuccess(input);\n    return true;\n  };\n\n  const isValidEmail = (email) =>\n    /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email.trim());\n\n  const isValidPhone = (phone) =>\n    /^(\\+?\\d{1,3})?[\\s-]?(\\d{3})[\\s-]?(\\d{3})[\\s-]?(\\d{2})[\\s-]?(\\d{2})$/.test(\n      phone.trim()\n    );\n\n  const isValidName = (name) => /^[a-zA-Zа-яА-ЯіІїЇєЄ' ]+$/u.test(name.trim());\n\n  // Error Styles adding\n  const setError = (element) =>\n    element.parentElement?.classList.add(\"form-group--error\");\n  const setSuccess = (element) =>\n    element.parentElement?.classList.remove(\"form-group--error\");\n\n  //  ============== Add Asterisk (*) to Required Field Labels ============\n  document\n    .querySelectorAll(\"input[required], select[required]\")\n    .forEach((field) => {\n      console.log(field.name);\n      const label = document.querySelector(`label[for=\"${field.id}\"]`);\n      if (label) label.innerHTML += \" <span>*</span>\";\n    });\n})();\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}