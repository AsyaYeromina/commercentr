{"mappings":"ACGA,MAAM,EAAO,SAAS,cAAc,CAAC,QAC/B,EAAW,SAAS,cAAc,CAAC,QACnC,EAAQ,SAAS,cAAc,CAAC,SAChC,EAAQ,SAAS,cAAc,CAAC,SAChC,EAAQ,SAAS,cAAc,CAAC,SAChC,EAAS,SAAS,cAAc,CAAC,UAMvC,EAAK,gBAAgB,CAAC,SAAU,MAAO,IACrC,EAAM,cAAc,GAGf,KAGD,AAAC,EAAe,IAAY,EAAiB,KAIrC,EAAS,KAAK,CAAC,IAAI,GACtB,EAAM,KAAK,CAAC,IAAI,GAChB,EAAM,KAAK,CAAC,IAAI,GAChB,EAAO,KAAK,CAwBvB,GAGA,MAAM,EAAqB,KACzB,IAAM,EAAkB,EACtB,EACA,EA/CwB,GAkDpB,EAAe,EAAc,EAAO,GACpC,EAAe,EAAc,EAAO,GAE1C,OAAO,GAAmB,GAAgB,CAC5C,EAGM,EAAiB,AAAC,GACtB,AAAI,EAAO,KAAK,GAAK,EAAO,OAAO,CAAC,EAAE,CAAC,KAAK,EAC1C,EAAS,GACF,CAAA,IAET,EAAW,GACJ,CAAA,GAIH,EAAmB,AAAC,GACxB,EAAK,EAAS,aAAa,KACzB,EAAS,cAAc,GAChB,CAAA,GAML,EAAgB,CAAC,EAAO,EAAc,EAAY,CAAC,IACvD,IAAM,EAAQ,EAAM,KAAK,CAAC,IAAI,SAE9B,AAAc,KAAV,GAAgB,EAAM,MAAM,CAAG,GAK/B,CAAC,EAAa,IAJhB,EAAS,GACF,CAAA,IAQT,EAAW,GACJ,CAAA,EACT,EAEM,EAAe,AAAC,GACpB,mDAAmD,IAAI,CAAC,EAAM,IAAI,IAE9D,EAAe,AAAC,GACpB,sEAAsE,IAAI,CACxE,EAAM,IAAI,IAGR,EAAc,AAAC,GAAS,6BAA6B,IAAI,CAAC,EAAK,IAAI,IAGnE,EAAW,AAAC,GAChB,EAAQ,aAAa,EAAE,UAAU,IAAI,qBACjC,EAAa,AAAC,GAClB,EAAQ,aAAa,EAAE,UAAU,OAAO,qBAK1C,SACG,gBAAgB,CAAC,qCACjB,OAAO,CAAC,AAAC,IACR,IAAM,EAAQ,SAAS,aAAa,CAAC,CAAC,WAAW,EAAE,EAAM,EAAE,CAAC,EAAE,CAAC,EAC3D,GAAO,CAAA,EAAM,SAAS,EAAI,iBAA9B,CACF","sources":["<anon>","src/js/main.js"],"sourcesContent":["// #region ========== Inputs data validation and sending ========\n// Find inputs in form\nconst form = document.getElementById(\"form\");\nconst username = document.getElementById(\"name\");\nconst email = document.getElementById(\"email\");\nconst phone = document.getElementById(\"phone\");\nconst agree = document.getElementById(\"agree\");\nconst select = document.getElementById(\"select\");\n// Adjust minimal length for name validation if needed\nconst MINIMAL_NAME_LENGTH = 3;\n// Form Submission Handler\nform.addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    // Validate inputs\n    if (!validateTextInputs()) return;\n    // Validate Select and Checkbox\n    if (!validateSelect(select) || !validateCheckbox(agree)) return;\n    // Prepare form data\n    const formData = {\n        username: username.value.trim(),\n        phone: phone.value.trim(),\n        email: email.value.trim(),\n        title: select.value\n    };\n// Submit form data via AJAX\n// try {\n//   const response = await fetch(\"https://api-endpoint...\", {\n//     method: \"POST\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify(formData),\n//   });\n//   if (!response.ok) {\n//     throw new Error(`Error: ${response.statusText}`);\n//   }\n//   const result = await response.json();\n//   console.log(\"Success:\", result);\n//   alert(\"Дякуємо за звернення, ми вас сповістимо на вказаний e-mail!\");\n//   form.reset();\n// } catch (error) {\n//   console.error(\"Error submitting form:\", error);\n//   alert(\"Сталась помилка при відправленні форми. Спробуйте ще раз\");\n// }\n});\n// Validate All Inputs\nconst validateTextInputs = ()=>{\n    const isUsernameValid = validateField(username, isValidName, MINIMAL_NAME_LENGTH);\n    const isEmailValid = validateField(email, isValidEmail);\n    const isPhoneValid = validateField(phone, isValidPhone);\n    return isUsernameValid && isEmailValid && isPhoneValid;\n};\n// Validate Select\nconst validateSelect = (select)=>{\n    if (select.value === select.options[0].value) {\n        setError(select);\n        return false;\n    }\n    setSuccess(select);\n    return true;\n};\n// Validate Checkbox\nconst validateCheckbox = (checkbox)=>{\n    if (!checkbox.checkValidity()) {\n        checkbox.reportValidity();\n        return false;\n    }\n    return true;\n};\n// Validate Each Field\nconst validateField = (input, validationFn, minLength = 0)=>{\n    const value = input.value.trim();\n    if (value === \"\" || value.length < minLength) {\n        setError(input);\n        return false;\n    }\n    if (!validationFn(value)) {\n        setError(input);\n        return false;\n    }\n    setSuccess(input);\n    return true;\n};\nconst isValidEmail = (email)=>/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email.trim());\nconst isValidPhone = (phone)=>/^(\\+?\\d{1,3})?[\\s-]?(\\d{3})[\\s-]?(\\d{3})[\\s-]?(\\d{2})[\\s-]?(\\d{2})$/.test(phone.trim());\nconst isValidName = (name)=>/^[a-zA-Zа-яА-ЯіІїЇєЄ' ]+$/u.test(name.trim());\n// Error Styles adding\nconst setError = (element)=>element.parentElement?.classList.add(\"form-group--error\");\nconst setSuccess = (element)=>element.parentElement?.classList.remove(\"form-group--error\");\n// #endregion\n// #region ============== Add Asterisk (*) to Required Field Labels ============\ndocument.querySelectorAll(\"input[required], select[required]\").forEach((field)=>{\n    const label = document.querySelector(`label[for=\"${field.id}\"]`);\n    if (label) label.innerHTML += \" <span>*</span>\";\n}); // #endregion\n\n//# sourceMappingURL=index.7c26e42c.js.map\n","// #region ========== Inputs data validation and sending ========\n\n// Find inputs in form\nconst form = document.getElementById(\"form\");\nconst username = document.getElementById(\"name\");\nconst email = document.getElementById(\"email\");\nconst phone = document.getElementById(\"phone\");\nconst agree = document.getElementById(\"agree\");\nconst select = document.getElementById(\"select\");\n\n// Adjust minimal length for name validation if needed\nconst MINIMAL_NAME_LENGTH = 3;\n\n// Form Submission Handler\nform.addEventListener(\"submit\", async (event) => {\n  event.preventDefault();\n\n  // Validate inputs\n  if (!validateTextInputs()) return;\n\n  // Validate Select and Checkbox\n  if (!validateSelect(select) || !validateCheckbox(agree)) return;\n\n  // Prepare form data\n  const formData = {\n    username: username.value.trim(),\n    phone: phone.value.trim(),\n    email: email.value.trim(),\n    title: select.value,\n  };\n\n  // Submit form data via AJAX\n  // try {\n  //   const response = await fetch(\"https://api-endpoint...\", {\n  //     method: \"POST\",\n  //     headers: { \"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(formData),\n  //   });\n\n  //   if (!response.ok) {\n  //     throw new Error(`Error: ${response.statusText}`);\n  //   }\n\n  //   const result = await response.json();\n  //   console.log(\"Success:\", result);\n\n  //   alert(\"Дякуємо за звернення, ми вас сповістимо на вказаний e-mail!\");\n  //   form.reset();\n  // } catch (error) {\n  //   console.error(\"Error submitting form:\", error);\n  //   alert(\"Сталась помилка при відправленні форми. Спробуйте ще раз\");\n  // }\n});\n\n// Validate All Inputs\nconst validateTextInputs = () => {\n  const isUsernameValid = validateField(\n    username,\n    isValidName,\n    MINIMAL_NAME_LENGTH\n  );\n  const isEmailValid = validateField(email, isValidEmail);\n  const isPhoneValid = validateField(phone, isValidPhone);\n\n  return isUsernameValid && isEmailValid && isPhoneValid;\n};\n\n// Validate Select\nconst validateSelect = (select) => {\n  if (select.value === select.options[0].value) {\n    setError(select);\n    return false;\n  }\n  setSuccess(select);\n  return true;\n};\n\n// Validate Checkbox\nconst validateCheckbox = (checkbox) => {\n  if (!checkbox.checkValidity()) {\n    checkbox.reportValidity();\n    return false;\n  }\n  return true;\n};\n\n// Validate Each Field\nconst validateField = (input, validationFn, minLength = 0) => {\n  const value = input.value.trim();\n\n  if (value === \"\" || value.length < minLength) {\n    setError(input);\n    return false;\n  }\n\n  if (!validationFn(value)) {\n    setError(input);\n    return false;\n  }\n\n  setSuccess(input);\n  return true;\n};\n\nconst isValidEmail = (email) =>\n  /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email.trim());\n\nconst isValidPhone = (phone) =>\n  /^(\\+?\\d{1,3})?[\\s-]?(\\d{3})[\\s-]?(\\d{3})[\\s-]?(\\d{2})[\\s-]?(\\d{2})$/.test(\n    phone.trim()\n  );\n\nconst isValidName = (name) => /^[a-zA-Zа-яА-ЯіІїЇєЄ' ]+$/u.test(name.trim());\n\n// Error Styles adding\nconst setError = (element) =>\n  element.parentElement?.classList.add(\"form-group--error\");\nconst setSuccess = (element) =>\n  element.parentElement?.classList.remove(\"form-group--error\");\n\n// #endregion\n\n// #region ============== Add Asterisk (*) to Required Field Labels ============\ndocument\n  .querySelectorAll(\"input[required], select[required]\")\n  .forEach((field) => {\n    const label = document.querySelector(`label[for=\"${field.id}\"]`);\n    if (label) label.innerHTML += \" <span>*</span>\";\n  });\n\n// #endregion\n"],"names":["form","document","getElementById","username","email","phone","agree","select","addEventListener","event","preventDefault","validateTextInputs","validateSelect","validateCheckbox","value","trim","isUsernameValid","validateField","isValidName","isEmailValid","isValidEmail","isPhoneValid","isValidPhone","options","setError","setSuccess","checkbox","checkValidity","reportValidity","input","validationFn","minLength","length","test","name","element","parentElement","classList","add","remove","querySelectorAll","forEach","field","label","querySelector","id","innerHTML"],"version":3,"file":"index.7c26e42c.js.map"}