{"mappings":"AAAA,kBAAkB;AAClB,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,WAAW,SAAS,cAAc,CAAC;AACzC,MAAM,QAAQ,SAAS,cAAc,CAAC;AACtC,MAAM,QAAQ,SAAS,cAAc,CAAC;AACtC,MAAM,QAAQ,SAAS,cAAc,CAAC;AACtC,MAAM,aAAa;IAAC;IAAU;IAAO;IAAO;CAAM;AAElD,KAAK,gBAAgB,CAAC,UAAU,OAAO;IACrC,IAAI,CAAC,KAAK,aAAa,IAAI;QACzB;QACA;IACF;IAEA,EAAE,cAAc;IAEhB,IAAI,oBAAoB,MAAM,OAAO,EAAE;QACrC,MAAM,WAAW;YACf,UAAU,SAAS,KAAK,CAAC,IAAI;YAC7B,OAAO,MAAM,KAAK,CAAC,IAAI;YACvB,OAAO,MAAM,KAAK,CAAC,IAAI;QACzB;QAEA,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,2BAA2B;gBACtD,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,SAAS,UAAU,EAAE;YAGjD,MAAM,SAAS,MAAM,SAAS,IAAI;YAClC,QAAQ,GAAG,CAAC,YAAY;YAExB,MAAM;YACN,KAAK,KAAK;QACZ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;AACF;AAGA,8CAA8C;AAC9C,MAAM,8BAA8B;IAClC,WAAW,OAAO,CAAC,CAAA;QACjB,IAAI,CAAC,MAAM,aAAa,IACtB,SAAS;aAET,WAAW;IAEf;AACF;AAEA,MAAM,WAAW,CAAA;IACf,MAAM,eAAe,QAAQ,aAAa;IAC1C,IAAI,gBAAgB,CAAC,aAAa,SAAS,CAAC,QAAQ,CAAC,sBACnD,aAAa,SAAS,CAAC,GAAG,CAAC;IAE7B;AACF;AAEA,MAAM,aAAa,CAAA;IACjB,MAAM,eAAe,QAAQ,aAAa;IAE1C,IAAI,gBAAgB,aAAa,SAAS,CAAC,QAAQ,CAAC,sBAClD,aAAa,SAAS,CAAC,MAAM,CAAC;IAEhC;AACF;AAEA,MAAM,eAAe,CAAC;IACpB,MAAM,KAAK;IACX,OAAO,GAAG,IAAI,CAAC,OAAO,OAAO,WAAW;AAC1C;AAEA,MAAM,eAAe,CAAC;IACpB,MAAM,KAAK;IACX,OAAO,GAAG,IAAI,CAAC,MAAM,IAAI;AAC3B;AAEA,MAAM,cAAc,CAAC;IACnB,MAAM,KAAK;IACX,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI;AAC1B;AAEA,MAAM,gBAAgB,CAAC,OAAO,cAAc,YAAY,CAAC;IACvD,MAAM,QAAQ,MAAM,KAAK,CAAC,IAAI;IAE9B,IAAI,UAAU,MAAM,MAAM,MAAM,GAAG,WAAW;QAC5C,SAAS;QACT,OAAO;IACT;IAEA,IAAI,CAAC,aAAa,QAAQ;QACxB,SAAS;QACT,OAAO;IACT;IAEA,WAAW;IACX,OAAO;AACT;AAEA,MAAM,iBAAiB;IACrB,MAAM,kBAAkB,cAAc,UAAU,aAAa;IAC7D,MAAM,eAAe,cAAc,OAAO;IAC1C,MAAM,eAAe,cAAc,OAAO;IAE1C,OAAO,mBAAmB,gBAAgB;AAC5C;AAGA,8CAA8C;AAC9C,SAAS,gBAAgB,CAAC,qCAAqC,OAAO,CAAC,CAAA;IACrE,MAAM,QAAQ,SAAS,aAAa,CAAC,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;IAC/D,IAAI,OACF,MAAM,SAAS,IAAI;AAEvB","sources":["src/js/input.js"],"sourcesContent":["// Find all inputs\nconst form = document.getElementById('form');\nconst username = document.getElementById('name');\nconst email = document.getElementById('email');\nconst phone = document.getElementById('phone');\nconst agree = document.getElementById('agree');\nconst formFields = [username, email, phone, agree];\n\nform.addEventListener('submit', async (e) => {\n  if (!form.checkValidity()) {\n    applyCustomValidationStyles();\n    return;\n  }\n\n  e.preventDefault();\n\n  if (validateInputs() && agree.checked) {\n    const formData = {\n      username: username.value.trim(),\n      email: email.value.trim(),\n      phone: phone.value.trim(),\n    };\n\n    try {\n      const response = await fetch('https://api-endpoint...', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      console.log('Success:', result);\n\n      alert('Дякуємо за звернення, ми вас сповістимо на вказаний e-mail!');\n      form.reset();\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      alert('Сталась помилка при відправленні форми. Спробуйте ще раз');\n    }\n  }\n});\n\n\n// inputs values validation end error settings\nconst applyCustomValidationStyles = () => {\n  formFields.forEach(input => {\n    if (!input.checkValidity()) {\n      setError(input);\n    } else {\n      setSuccess(input);\n    }\n  });\n};\n\nconst setError = element => {\n  const inputControl = element.parentElement;\n  if (inputControl && !inputControl.classList.contains('form-group--error')) {\n    inputControl.classList.add('form-group--error');\n  }\n  return;\n};\n\nconst setSuccess = element => {\n  const inputControl = element.parentElement;\n\n  if (inputControl && inputControl.classList.contains('form-group--error')) {\n    inputControl.classList.remove('form-group--error');\n  }\n  return;\n};\n\nconst isValidEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst isValidPhone = (phone) => {\n  const re = /^(\\+?\\d{1,3})?[\\s-]?(\\d{3})[\\s-]?(\\d{3})[\\s-]?(\\d{2})[\\s-]?(\\d{2})$/;\n  return re.test(phone.trim());\n};\n\nconst isValidName = (name) => {\n  const re = /^[a-zA-Zа-яА-ЯіІїЇєЄ' ]+$/u;\n  return re.test(name.trim());\n};\n\nconst validateField = (input, validationFn, minLength = 0) => {\n  const value = input.value.trim();\n\n  if (value === '' || value.length < minLength) {\n    setError(input);\n    return false;\n  }\n\n  if (!validationFn(value)) {\n    setError(input);\n    return false;\n  }\n\n  setSuccess(input);\n  return true;\n};\n\nconst validateInputs = () => {\n  const isUsernameValid = validateField(username, isValidName, 3);\n  const isEmailValid = validateField(email, isValidEmail);\n  const isPhoneValid = validateField(phone, isValidPhone);\n\n  return isUsernameValid && isEmailValid && isPhoneValid;\n};\n\n\n// Add * to all laels that has required inputs\ndocument.querySelectorAll(\"input[required], select[required]\").forEach(field => {\n  const label = document.querySelector(`label[for=\"${field.id}\"]`);\n  if (label) {\n    label.innerHTML += ' <span>*</span>';\n  }\n});\n"],"names":[],"version":3,"file":"index.4fe4e4d1.js.map","sourceRoot":"/__parcel_source_root/"}